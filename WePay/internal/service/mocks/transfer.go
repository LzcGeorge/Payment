// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/transfer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/transfer.go -destination=./internal/service/mocks/transfer.go -package=svcmocks
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"
	domain "wepay/internal/domain"
	service "wepay/internal/service"
	wxpay_utility "wepay/internal/service/wxpay_utility"

	gomock "go.uber.org/mock/gomock"
)

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
	isgomock struct{}
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// AddTransferRequest mocks base method.
func (m *MockTransferService) AddTransferRequest(ctx context.Context, req *domain.TransferRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransferRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransferRequest indicates an expected call of AddTransferRequest.
func (mr *MockTransferServiceMockRecorder) AddTransferRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransferRequest", reflect.TypeOf((*MockTransferService)(nil).AddTransferRequest), ctx, req)
}

// GenerateOutBillNo mocks base method.
func (m *MockTransferService) GenerateOutBillNo(openid string, amount int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOutBillNo", openid, amount)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateOutBillNo indicates an expected call of GenerateOutBillNo.
func (mr *MockTransferServiceMockRecorder) GenerateOutBillNo(openid, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOutBillNo", reflect.TypeOf((*MockTransferService)(nil).GenerateOutBillNo), openid, amount)
}

// GetTransferRecordByOutBillNo mocks base method.
func (m *MockTransferService) GetTransferRecordByOutBillNo(ctx context.Context, outbillno string) (domain.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferRecordByOutBillNo", ctx, outbillno)
	ret0, _ := ret[0].(domain.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferRecordByOutBillNo indicates an expected call of GetTransferRecordByOutBillNo.
func (mr *MockTransferServiceMockRecorder) GetTransferRecordByOutBillNo(ctx, outbillno any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferRecordByOutBillNo", reflect.TypeOf((*MockTransferService)(nil).GetTransferRecordByOutBillNo), ctx, outbillno)
}

// GetTransferRecordByPackageInfo mocks base method.
func (m *MockTransferService) GetTransferRecordByPackageInfo(ctx context.Context, packageInfo string) (domain.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferRecordByPackageInfo", ctx, packageInfo)
	ret0, _ := ret[0].(domain.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferRecordByPackageInfo indicates an expected call of GetTransferRecordByPackageInfo.
func (mr *MockTransferServiceMockRecorder) GetTransferRecordByPackageInfo(ctx, packageInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferRecordByPackageInfo", reflect.TypeOf((*MockTransferService)(nil).GetTransferRecordByPackageInfo), ctx, packageInfo)
}

// GetTransferStatus mocks base method.
func (m *MockTransferService) GetTransferStatus(ctx context.Context, outbillno string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferStatus", ctx, outbillno)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferStatus indicates an expected call of GetTransferStatus.
func (mr *MockTransferServiceMockRecorder) GetTransferStatus(ctx, outbillno any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferStatus", reflect.TypeOf((*MockTransferService)(nil).GetTransferStatus), ctx, outbillno)
}

// TransferToUser mocks base method.
func (m *MockTransferService) TransferToUser(config *wxpay_utility.MchConfig, request *service.TransferToUserRequest) (*service.TransferToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferToUser", config, request)
	ret0, _ := ret[0].(*service.TransferToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferToUser indicates an expected call of TransferToUser.
func (mr *MockTransferServiceMockRecorder) TransferToUser(config, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferToUser", reflect.TypeOf((*MockTransferService)(nil).TransferToUser), config, request)
}

// UpdateTransferStatus mocks base method.
func (m *MockTransferService) UpdateTransferStatus(ctx context.Context, outbillno, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferStatus", ctx, outbillno, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransferStatus indicates an expected call of UpdateTransferStatus.
func (mr *MockTransferServiceMockRecorder) UpdateTransferStatus(ctx, outbillno, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferStatus", reflect.TypeOf((*MockTransferService)(nil).UpdateTransferStatus), ctx, outbillno, state)
}
